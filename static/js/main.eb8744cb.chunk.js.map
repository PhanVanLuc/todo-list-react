{"version":3,"sources":["components/TodoList/index.tsx","components/TodoForm/index.tsx","components/EditForm/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["TodoList","props","todos","onTodoClick","onTodoCheck","onToggleForm","Display","editDisplay","onToggleEditForm","onSearch","useState","keyword","setKeyword","className","type","onClick","value","name","placeholder","onChange","e","target","scope","map","todo","index","title","checked","done","id","toString","handleCheck","handleClick","handleToggleEditForm","defaultProps","TodoForm","onSubmit","onCloseForm","input","setInput","handleValueChange","preventDefault","formValues","console","log","required","EditForm","App","todoList","setTodoList","isDisplay","setDisplay","isEditDisplay","setEditDisplay","todoEdit","setTodoEdit","fetchTodoList","a","requestUrl","fetch","response","json","responseJSON","data","message","handleCloseForm","config","method","headers","body","JSON","stringify","res","updatedTodoList","useEffect","elmform","then","newTodo","newTodoList","push","catch","error","editform","findIndex","x","splice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb8744cb.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Todo {\r\n  id: number;\r\n  title: string;\r\n  done: boolean;\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array,\r\n  onTodoClick: PropTypes.func,\r\n  onTodoCheck: PropTypes.func,\r\n  onToggleForm: PropTypes.func,\r\n  onToggleEditForm: PropTypes.func,\r\n  onSearch: PropTypes.func,\r\n  Display: PropTypes.bool,\r\n  editDisplay: PropTypes.bool\r\n};\r\n\r\nTodoList.defaultProps = {\r\n  todos: [],\r\n  onTodoClick: null,\r\n  onTodoCheck: null,\r\n  onToggleForm: null,\r\n  onToggleEditForm: null,\r\n  onSearch: () => {},\r\n  Display: false,\r\n  editDisplay: false\r\n};\r\n\r\nfunction TodoList(props: any) {\r\n  const { todos, onTodoClick, onTodoCheck, onToggleForm, Display, editDisplay, onToggleEditForm, onSearch } = props;\r\n  const [keyword, setKeyword] = useState<string>('');\r\n\r\n  function handleClick(todo: Todo) {\r\n    if (onTodoClick) {\r\n      onTodoClick(todo);\r\n    }\r\n  }\r\n\r\n  function handleCheck(todo: Todo) {\r\n    //if (onTodoCheck) {\r\n      onTodoCheck(todo);\r\n    //}\r\n  }\r\n\r\n  function handleToggleForm() {\r\n    onToggleForm()\r\n  }\r\n\r\n  function handleToggleEditForm(todo: Todo) {\r\n    onToggleEditForm(todo)\r\n  }\r\n\r\n  function handleValueChange(e: any){\r\n    const value = e.target.value\r\n    setKeyword(value)\r\n  }\r\n\r\n  function handleSearch() {\r\n    onSearch(keyword)\r\n  }\r\n\r\n  function handleClear() {\r\n    setKeyword('')\r\n    onSearch('')\r\n  }\r\n\r\n  return (\r\n    <div className={ (editDisplay||Display) ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\r\n      <div className=\"row\">\r\n        <button className=\"btn btn-primary\" type=\"button\" onClick={() => handleToggleForm()}>Thêm công việc</button>\r\n      </div>\r\n      <div className=\"row mt-2\">\r\n        <div className=\"input-group\">\r\n          <button className=\"btn btn-primary\" type=\"submit\" onClick={() => handleClear()}>x</button>\r\n          <input value={keyword} type=\"text\" className=\"form-control\" name=\"search\" placeholder=\"Nhập từ khóa...\" onChange={handleValueChange}/>\r\n          <span className=\"input-group-btn\">\r\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={() => handleSearch()}>Tìm</button>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">STT</th>\r\n              <th scope=\"col\">Tên công việc</th>\r\n              <th scope=\"col\" className=\"text-center\">Trạng thái</th>\r\n              <th scope=\"col\" className=\"text-center\">Hành động</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {todos.map((todo: Todo, index: any) => (\r\n              <tr key={todo.id}>\r\n                <th scope=\"row\">{index+1}</th>\r\n                <td>{todo.title}</td>\r\n                <td className=\"text-center\"><input checked={todo.done ? true : false} type=\"checkbox\" id={todo.id.toString()} onChange={() => handleCheck(todo)} /></td>\r\n                <td className=\"text-center\">\r\n                  <button className=\"btn btn-danger\" onClick={() => handleClick(todo)}>Xóa</button>\r\n                  <button className=\"btn btn-primary\" type=\"button\" onClick={() => handleToggleEditForm(todo)}>Sửa</button>\r\n                </td>\r\n            </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Todo {\r\n  title: string;\r\n  done: boolean;\r\n}\r\n\r\nTodoForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  onCloseForm: PropTypes.func,\r\n};\r\n\r\nTodoForm.defaultProps = {\r\n  onSubmit: null,\r\n  onCloseForm: null,\r\n}\r\n\r\nfunction TodoForm(props: any) {\r\n  const {onSubmit, onCloseForm} = props;\r\n  const [input, setInput] = useState<Todo>({title: '', done: false});\r\n\r\n  function handleValueChange(e: any){\r\n    const value = e.target.value\r\n    const name = e.target.name\r\n    setInput({...input, [name]: value})\r\n  }\r\n\r\n  function handleSubmit(e: any){\r\n    e.preventDefault();\r\n    if(!onSubmit) return;\r\n    const formValues = {\r\n      title: input.title,\r\n      done: input.done,\r\n    }\r\n    console.log(formValues)\r\n    onSubmit(formValues)\r\n    setInput({title: '', done: false})\r\n  }\r\n\r\n  function handleCloseForm(){\r\n    onCloseForm()\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n      <div className=\"card\">\r\n        <div className=\"card-header bg-warning\">\r\n          <div className=\"row\">\r\n            <div className=\"col-10\">\r\n              <h3 className=\"panel-title text-white text-left\">\r\n                Thêm Công Việc\r\n              </h3>\r\n            </div>\r\n            <div className=\"col-2\">\r\n              <h3><span className=\"far fa-times-circle text-white\" onClick={handleCloseForm}></span></h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label>Tên :</label>\r\n              <input type=\"text\" className=\"form-control\" value={input.title} onChange={handleValueChange} name=\"title\"/>\r\n              <label>Trạng Thái :</label>\r\n              <select className=\"form-control\" required={true} onChange={handleValueChange} name=\"done\">\r\n                  <option value=\"0\">Chưa hoàn thành</option>\r\n                  <option value=\"1\">Đã hoàn thành</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <button type=\"submit\" className=\"btn btn-warning\">Thêm</button>&nbsp;\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoForm;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Todo {\r\n  id: number;\r\n  title: string;\r\n  done: boolean;\r\n}\r\n\r\nEditForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  onCloseForm: PropTypes.func,\r\n  todo: PropTypes.object,\r\n};\r\n\r\nEditForm.defaultProps = {\r\n  onSubmit: null,\r\n  onCloseForm: null,\r\n  todo: null,\r\n}\r\n\r\nfunction EditForm(props: any) {\r\n  const {onSubmit, onCloseForm, todo} = props;\r\n  const [input, setInput] = useState<Todo>({...todo});\r\n\r\n  function handleValueChange(e: any){\r\n    const value = e.target.value\r\n    const name = e.target.name\r\n    setInput({...input, [name]: value})\r\n  }\r\n\r\n  function handleSubmit(e: any){\r\n    e.preventDefault();\r\n    if(!onSubmit) return;\r\n    const formValues = {\r\n      id: input.id,\r\n      title: input.title,\r\n      done: input.done,\r\n    }\r\n    console.log(formValues)\r\n    onSubmit(formValues)\r\n    //setInput({title: '', done: false})\r\n  }\r\n\r\n  function handleCloseForm(){\r\n    onCloseForm()\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n      <div className=\"card\">\r\n        <div className=\"card-header bg-warning\">\r\n          <div className=\"row\">\r\n            <div className=\"col-10\">\r\n              <h3 className=\"panel-title text-white text-left\">\r\n                Sửa Công Việc\r\n              </h3>\r\n            </div>\r\n            <div className=\"col-2\">\r\n              <h3><span className=\"far fa-times-circle text-white\" onClick={handleCloseForm}></span></h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label>Tên :</label>\r\n              <input type=\"text\" className=\"form-control\" value={input.title} onChange={handleValueChange} name=\"title\"/>\r\n              <label>Trạng Thái :</label>\r\n              <select className=\"form-control\" required={true} onChange={handleValueChange} value={input.done.toString()} name=\"done\">\r\n                  <option value=\"false\">Chưa hoàn thành</option>\r\n                  <option value=\"true\">Đã hoàn thành</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <button type=\"submit\" className=\"btn btn-warning\">Sửa</button>&nbsp;\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditForm;","import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport EditForm from './components/EditForm';\n\nimport './App.css';\ninterface Todo {\n  id: number;\n  title: string;\n  done: boolean;\n  \n}\nfunction App() {\n  const [todoList, setTodoList] = useState<any>([]);\n  const [isDisplay, setDisplay] = useState<boolean>(false);\n  const [isEditDisplay, setEditDisplay] = useState<boolean>(false);\n  const [todoEdit, setTodoEdit] = useState<Todo>();\n\n\n  useEffect(() => {\n    fetchTodoList();\n  }, []);\n\n  async function fetchTodoList(keyword = '') {\n    try {\n      const requestUrl = `https://rails-api-todo-list.herokuapp.com/api/v1/todos?search=${keyword}`;\n      const response = await fetch(requestUrl);\n      const responseJSON = await response.json();\n      console.log({ responseJSON });\n      const data = responseJSON;\n      console.log(data)\n      setTodoList(data);\n    } catch (error: any) {\n      console.log('Failed to fetch post list: ', error.message);\n    }\n  }\n\n  function handleTodoClick(todo: Todo) {\n    fetch('https://rails-api-todo-list.herokuapp.com/api/v1/todos/' + todo.id, {\n        method: 'DELETE',\n      })\n    .then(response => {\n      const index = todoList.findIndex((x: any) => x.id === todo.id);\n      if (index < 0) return;\n\n      const newTodoList = [...todoList];\n      newTodoList.splice(index, 1);\n      setTodoList(newTodoList);\n    })\n    .catch(error => console.log(error))\n    console.log(todo);\n  }\n\n  function handleRenderForm() {\n    setDisplay(!isDisplay);\n    setEditDisplay(false);\n  }\n\n  function handleRenderEditForm(todo: Todo) {\n    setTodoEdit(todo);\n    console.log(todo);\n    setEditDisplay(true);\n    setDisplay(false);\n  }\n\n  function handleCloseForm(){\n    setDisplay(false);\n    setEditDisplay(false);\n  }\n  async function handleTodoCheck(todo: Todo) {\n    try {\n      const config = {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({...todo, done: !todo.done}),\n      }\n      const res = await fetch(`https://rails-api-todo-list.herokuapp.com/api/v1/todos/${todo.id}`, config)\n      const data = await res.json()\n      const updatedTodoList = todoList.map((todo: any) => {\n        if (todo.id === data.id) todo.done = data.done\n        return todo\n      })\n      setTodoList(updatedTodoList);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  function handleTodoFormSubmit(formValues: any){\n    console.log('form submit:', formValues)\n    fetch('https://rails-api-todo-list.herokuapp.com/api/v1/todos', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formValues),\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      const newTodo = data\n      const newTodoList: any = [...todoList];\n      newTodoList.push(newTodo);\n      setTodoList(newTodoList);\n    })\n    .catch(error => console.log(error))\n    \n  }\n\n  async function handleEditTodoFormSubmit(formValues: any){\n    try {\n      const config = {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({...formValues, title: formValues.title, done: formValues.done }),\n      }\n      const res = await fetch(`https://rails-api-todo-list.herokuapp.com/api/v1/todos/${formValues.id}`, config)\n      const data = await res.json()\n      const updatedTodoList = todoList.map((todo: Todo) => {\n        if (todo.id === data.id) \n        {\n          todo.title = data.title;\n          todo.done = data.done;\n        }\n        return todo\n      })\n      setTodoList(updatedTodoList);\n      setEditDisplay(false);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  function handleSearch(keyword: string) {\n    fetchTodoList(keyword);\n  }\n\n  var elmform= (isDisplay) ? <TodoForm onSubmit={handleTodoFormSubmit} onCloseForm={handleCloseForm} /> : ''\n  var editform= (isEditDisplay) ? <EditForm onSubmit={handleEditTodoFormSubmit} onCloseForm={handleCloseForm} todo={todoEdit} /> : ''  \n  return (\n    <div className=\"App container\">\n      <div className=\"text-center\">\n        <h1>Todo List</h1>\n        <hr/>\n      </div>\n      <div className=\"row\">\n        {elmform}\n        {editform}\n        <TodoList \n          todos={todoList}\n          editDisplay={isEditDisplay}\n          Display={isDisplay}\n          onToggleForm={handleRenderForm}\n          onToggleEditForm={handleRenderEditForm}\n          onTodoClick={handleTodoClick} \n          onTodoCheck={handleTodoCheck}\n          onSearch={handleSearch}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}